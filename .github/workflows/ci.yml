name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Lint and build
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
        black --check app/ && isort --check-only app/ && flake8 app/
        docker build --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max -t schedule-manager:test .
        
    - name: Test application
      run: |
        docker run -d -p 6247:6247 --name test-container --health-cmd="curl -f http://localhost:6247/health || exit 1" --health-interval=5s --health-timeout=3s --health-retries=3 schedule-manager:test
        
        # Wait for healthy status
        timeout 60s bash -c 'until docker inspect --format="{{.State.Health.Status}}" test-container | grep -q healthy; do sleep 2; done'
        
        # Comprehensive validation
        HEALTH_RESPONSE=$(curl -s http://localhost:6247/health)
        echo "$HEALTH_RESPONSE" | jq -e '.status == "healthy" and .checks.storage.status == "healthy" and .checks.auth.status == "healthy" and .checks.calendar.status == "healthy"'
        
        # Test endpoints in parallel
        curl -f http://localhost:6247/login & curl -f http://localhost:6247/calendar.ics & curl -f http://localhost:6247/engineer/alex.ics & wait
        
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
    - name: Cleanup
      if: always()
      run: docker stop test-container || true
      
    - name: Auto-merge dependencies
      if: success() && github.event_name == 'pull_request' && (github.actor == 'renovate[bot]' || github.actor == 'dependabot[bot]')
      uses: pascalgn/automerge-action@v0.16.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MERGE_METHOD: squash
        MERGE_COMMIT_MESSAGE: "chore: auto-merge dependency update"